index.ejs

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
    <title>Users</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { border-collapse: collapse; width: 50%; }
        table, th, td { border: 1px solid #ccc; }
        th, td { padding: 8px; text-align: left; }
        form { margin-bottom: 20px; }
    </style>
</head>
<body>
    <h1>Users</h1>

    <!-- Form to add a new customer -->
    <form action="/registeroriginal" method="POST">
        <input type="text" name="username" placeholder="Enter username" required>
        <button type="submit">Add Username</button>
    </form>

    <!-- Table of existing customers -->
    <h2>Users</h2>
    <table>
    <thead>
        <tr>
            <th>Username</th>
        </tr>
    </thead>
    <tbody>
        <% if (users && users.length) { %>
        <% users.forEach(user => { %>
        <tr>
            <td><%= user.username %></td>
        </tr>
        <% }); %>
        <% } else { %>
        <tr>
            <td colspan="3">No customers found.</td>
        </tr>
        <% } %>
    </tbody>
    </table>

    <h1>Clear!</h1>

    <!-- Form to add a new customer -->
    <form action="/clear" method="POST">
        <button type="submit">Clear all users!</button>
    </form>

</body>
</html>

_______________________________________________________________________________________________________________________________________


server.js
// server.js
const express = require('express');
const mariadb = require('mariadb');
const path = require('path');
const bodyParser = require('body-parser');
const axios = require('axios');

const app = express();
const port = 80;

// Removed important information from here!
// Create a MariaDB connection pool
const pool = mariadb.createPool({
    host: , // Use IP address to force TCP connection
    port: 3306, // Ensure this is the correct port 
    user: , // Replace with your MariaDB
    password: , // Replace with your MariaDB password
    database: 'bankdb', // Our database name created above
    connectionLimit: 5
});

// Set EJS as the view engine and set the views directory
// app.set('view engine', 'ejs');
// app.set('views', path.join(__dirname, 'views'));

app.use(express.json());
// Use body-parser middleware to parse form data (if you prefer explicit usage)
// app.use(bodyParser.urlencoded({ extended: true }));
// Alternatively, you can use Express's built-in parsing:
// app.use(express.urlencoded({ extended: true }));

// Route: Display form and customer table
// app.get('/', async (req, res) => {
//     let conn;
//     try {
//         conn = await pool.getConnection();
//         // Get all customers from the table
//         const customers = await conn.query('SELECT * FROM customers');
//         res.render('index', { customers });
//     } catch (err) {
//         res.status(500).send(`Error retrieving customers: ${err}`);
//     } finally {
//         if (conn) conn.release();
//     }
// });

// Route: Add a new customer
// app.post('/add', async (req, res) => {
//     const name = req.body.name;
//     // Generate a random balance between 100 and 10,000 (two decimal places)
//     const balance = (Math.random() * (10000 - 100) + 100).toFixed(2);
//     let conn;
//     try {
//         conn = await pool.getConnection();
//         await conn.query('INSERT INTO customers(name, balance) VALUES (?, ?)', [name, balance]);
//         res.redirect('/');
//     } catch (err) {
//         res.status(500).send(`Error adding customer: ${err}`);
//     } finally {
//         if (conn) conn.release();
//     }
// });

app.get('/greeting', (req, res) => {
    res.send('<h1>Hello World!</h1>');
});

app.post('/register', async (req, res) => {
    // const name = req.body.name;
    const { username, dontrepeat } = req.body; // If is original, dontrepeat will be undef?

    if (!username) {
        return res.status(500).send(`Username required`);
    }

    let conn;
    try {
        conn = await pool.getConnection();
        await conn.query('INSERT INTO Users(username) VALUES (?)', [username]);

        // Executes if "false"
        if (!dontrepeat) {
            await axios.post('http://35.232.64.53:80/register', {username: username, dontrepeat: true});
        }
        res.status(201).send('User added.');
        
        // res.redirect('/');
    } catch (err) {
        res.status(500).send(`Error adding user: ${err}`);
    } finally {
        if (conn) conn.release();
    }
})

app.post('/registeroriginal', async (req, res) => {
    const username = req.body.username;
    let conn;
    try {
        conn = await pool.getConnection();
        await conn.query('INSERT INTO Users(username) VALUES (?)', [username]);
        res.redirect('/');
    } catch (err) {
        res.status(500).send(`Error adding user: ${err}`);
    } finally {
        if (conn) conn.release();
    }
})

app.get('/list', async (req, res) => {
    let conn;
    try{
        conn = await pool.getConnection();
        const users = await conn.query('SELECT * FROM Users');
        const user_usernames = users.map(user => user.username);
        res.status(200).json({users: user_usernames});

        // res.render('index', { users });
        // const [rows] = await conn.query('SELECT * FROM Users');
        // const users = rows.map(row => row.username);
        // res.json({ users });
    } catch (err) {
        res.status(500).send(`Error retrieving users: ${err}`);
    } finally {
        if (conn) conn.release();
    }
})

// Display page (original essentially)
app.get('/', async (req, res) => {
    let conn;
    try{
        conn = await pool.getConnection();
        const users = await conn.query('SELECT * FROM Users');
        res.render('index', { users });
    } catch (err) {
        res.status(500).send(`Error retrieving users: ${err}`);
    } finally {
        if (conn) conn.release();
    }
})


app.post('/clear', async (req, res) => {
    // need similar handling to /register
    const { dontrepeat } = req.body;

    let conn;
    try{
        conn = await pool.getConnection();
        await conn.query('DELETE FROM Users');

        if(!dontrepeat) {
            const serverRep = [
                'http://35.232.64.53:80',
            ];
            const promises = serverRep.map(repl => axios.post(`${repl}/clear`, { dontrepeat: true}));
            await Promise.all(promises);
        }

        res.status(200).json({ message: 'Successful clear.'});
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Error clearing users' });
    } finally {
        if (conn) conn.release();
    }
})

const serverData = async () => {
    let reqExip = await axios.get('http://ifconfig.me');
    let exip = reqExip.data;

    app.listen(port, () => {
        console.log(`Server is running on http://${exip}:${port}`);
    });
}

serverData();